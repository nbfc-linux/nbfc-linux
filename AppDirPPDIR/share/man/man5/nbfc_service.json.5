.nh
.TH NBFC\_SERVICE 1 "MARCH 2021" Notebook FanControl
.SH NAME
.PP
nbfc\_service.json \- Notebook FanControl service configuration

.SH ServiceConfig
.PP
Main configuration file of nbfc\_service

.PP
\fB\fC"SelectedConfigId"\fR: \fIconst char*\fP
  The selected config model. This equals the basename of a notebook model configuration file.

.PP
\fB\fC"ReadOnly"\fR: \fIBoolean\fP
  If \fB\fCtrue\fR, fan speeds will not be written to the embedded controller

.PP
\fB\fC"EmbeddedControllerType"\fR: \fIEmbeddedControllerType\fP
  Either \fB\fCECSysLinux\fR for using the \fB\fCec\_sys\fR kernel module, or \fB\fCECLinux\fR for an alternative implementation using \fB\fC/dev/port\fR without depending on kernel modules.

.PP
\fB\fC"TargetFanSpeeds"\fR: \fIarray\_of(float)\fP
  This holds the fixed speed of the fans. A value of \fB\fC\-1\fR means the fan should be left in auto mode.

.SH Config
.PP
\fB\fC"NotebookModel"\fR: \fIconst char*\fP
  The Notebook Model as described in your BIOS. See \fB\fCsudo dmidecode \-s system\-product\-name\fR\&.

.PP
\fB\fC"Author"\fR: \fIconst char*\fP
  The Author of the config file. Enter whatever you want.

.PP
\fB\fC"EcPollInterval"\fR: \fIshort > 0\fP
  Defines how often NBFC polls the EC for changes (in miliseconds).

.PP
\fB\fC"CriticalTemperature"\fR: \fIshort\fP
  If the temperature exceeds this threshold, NBFC will ignore all Temperature threshold elements and set the fan to 100% speed until the temperature drops below (\fB\fCCriticalTemperature\fR \- \fB\fCCriticalTemperatureOffset\fR)

.PP
\fB\fC"CriticalTemperatureOffset"\fR: \fIshort > 0\fP
  See \fB\fCCriticalTemperature\fR

.PP
\fB\fC"ReadWriteWords"\fR: \fIBoolean\fP
  If \fB\fCtrue\fR, NBFC will combine two 8 bit registers to one 16\-bit register when reading from or writing to the EC registers.

.PP
\fB\fC"FanConfigurations"\fR: \fIarray\_of(FanConfiguration).size > 0\fP
  Array of at least one FanConfiguration

.PP
\fB\fC"RegisterWriteConfigurations"\fR: \fIarray\_of(RegisterWriteConfiguration)\fP
  Array of RegisterWriteConfiguration

.SH FanConfiguration
.PP
Defines how NBFC controls a fan

.PP
\fB\fC"FanDisplayName"\fR: \fIconst char*\fP
  Fan display name

.PP
\fB\fC"ReadRegister"\fR: \fIshort >= 0 \&\& short <= 255\fP
  The register from which NBFC reads the fan speed.

.PP
\fB\fC"WriteRegister"\fR: \fIshort >= 0 \&\& short <= 255\fP
  The register which NBFC uses to control the fan

.PP
\fB\fC"MinSpeedValue"\fR: \fIshort\fP
  The value which puts the fan to the lowest possible speed (usually this stops the fan). Must be an integer between 0 and 255 or 0 and 65535 if ReadWriteWords is \fB\fCtrue\fR\&. Note: MinSpeedValue does not necessarily have to be smaller than MaxSpeedValue

.PP
\fB\fC"MaxSpeedValue"\fR: \fIshort\fP
  The value which puts the fan to the highest possible fan speed.

.PP
\fB\fC"MinSpeedValueRead"\fR: \fIshort\fP
  The value which corresponds to the lowest possible fan speed. Will be ignored if IndependentReadMinMaxValues is \fB\fCfalse\fR\&.

.PP
\fB\fC"MaxSpeedValueRead"\fR: \fIshort\fP
  The value which  corresponds to the highest possible fan speed. Will be ignored if IndependentReadMinMaxValues is \fB\fCfalse\fR\&.

.PP
\fB\fC"IndependentReadMinMaxValues"\fR: \fIBoolean\fP
  Defines if independent minimum/maximum values should be applied for read operations

.PP
\fB\fC"ResetRequired"\fR: \fIBoolean\fP
  Defines if the EC should be reset before the service is shut down.

.PP
\fB\fC"FanSpeedResetValue"\fR: \fIshort\fP
  Defines the value which will be written to WriteRegister to reset the EC.

.PP
\fB\fC"TemperatureThresholds"\fR: \fIarray\_of(TemperatureThreshold)\fP

.PP
\fB\fC"FanSpeedPercentageOverrides"\fR: \fIarray\_of(FanSpeedPercentageOverride)\fP

.SH RegisterWriteConfiguration
.PP
Allows to write to any EC register

.PP
\fB\fC"WriteMode"\fR: \fIRegisterWriteMode\fP
  Defines how the value will be written:

.RS
.IP \(bu 2
And: register = register bitwise\_and value
.IP \(bu 2
Or: register = register bitwise\_or value
.IP \(bu 2
Set register = value

.RE

.PP
\fB\fC"WriteOccasion"\fR: \fIRegisterWriteOccasion\fP
  Defines when the value should be written:

.RS
.IP \(bu 2
OnInitialization: writes the value once upon initialization (everytimee the fan control service is enabled or a config is applied)
.IP \(bu 2
OnWriteFanSpeed: writes the value everytimee the fan speed is set.

.RE

.PP
\fB\fC"Register"\fR: \fIshort >= 0 \&\& short <= 255\fP
  The register which will be manipulated.

.PP
\fB\fC"Value"\fR: \fIshort\fP
  The Value which will be written

.PP
\fB\fC"ResetRequired"\fR: \fIBoolean\fP
  Defines if the register should be reset before the service is shut down.

.PP
\fB\fC"ResetValue"\fR: \fIshort\fP
  The value which will be written upon reset.

.PP
\fB\fC"ResetWriteMode"\fR: \fIRegisterWriteMode\fP
  See WriteMode. Will only be applied on reset. Valid values: Set/And/Or

.PP
\fB\fC"Description"\fR: \fIconst char*\fP
  A short description of what effect the RegisterWriteConfiguration will have

.SH FanSpeedPercentageOverride
.PP
Overrides the default algorithm to calculate fan speeds

.PP
\fB\fC"FanSpeedPercentage"\fR: \fIfloat >= 0.0 \&\& float <= 100.0\fP
  The fan speed in percent

.PP
\fB\fC"FanSpeedValue"\fR: \fIshort\fP
  Fan fan speed value which will be written to WriteRegister

.PP
\fB\fC"TargetOperation"\fR: \fIOverrideTargetOperation\fP
  Defines for which operations the speeds should be overridden:

.RS
.IP \(bu 2
Read: Value\->Percentage
.IP \(bu 2
Write: Percentage\->Value
.IP \(bu 2
ReadWrite: both

.RE

.SH TemperatureThreshold
.PP
Defines how fast the fan runs at different temperatures

.PP
\fB\fC"UpThreshold"\fR: \fIshort\fP
  NBFC will select the next upper threshold as soon as the temperature exceeds \fIUpThreshold\fP\&. in celsius

.PP
\fB\fC"DownThreshold"\fR: \fIshort\fP
  NBFC will select the next lower threshold as soon as the temperature falls below the \fIDownThreshold\fP\&. in celsius

.PP
\fB\fC"FanSpeed"\fR: \fIfloat >= 0.0 \&\& float <= 100.0\fP
  The fan speed in percent

.SH FILES
.PP
\fI/var/run/nbfc\_service.state.json\fP
  State file of nbfc\_service. Updated every \fIEcPollInterval\fP miliseconds.

.PP
\fI/etc/nbfc/nbfc.json\fP
  The system wide configuration file.

.PP
\fI/etc/nbfc/configs/*\&.json\fP
  Configuration files for various notebook models.

.SH AUTHOR
.PP
Benjamin Abendroth (braph93@gmx.de)

.SH SEE ALSO
.PP
nbfc(1), nbfc\_service(1), ec\_probe(1), fancontrol(1), sensors(1)
